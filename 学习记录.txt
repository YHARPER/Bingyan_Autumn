/*
*逆波兰式：
因为计算机普遍采用的内存结构是栈式结构，它执行先进后出的顺序。
将一个普通的中序表达式转换为逆波兰表达式的一般算法是：
分配2个栈，一个作为临时存储运算符的栈S1（含一个结束符号），一个作为输入逆波兰式的栈S2（空栈），
从中缀式的左端开始取字符，
（1）若取出的字符是操作数，则分析出完整的运算数，该操作数直接送入S2栈
（2）若取出的字符是运算符，则将该运算符与S1栈栈顶元素比较，
如果该运算符优先级(不包括括号运算符)高于S1栈栈顶运算符优先级，则将该运算符进S1栈，
如果该运算符优先级(不包括括号运算符)低于等于S1栈栈顶运算符优先级，将S1栈的栈顶运算符弹出，送入S2栈中，
直至S1栈栈顶运算符低于该运算符优先级，最后将该运算符送入S1栈。
（3）若取出的字符是“（”，则直接送入S1栈顶。
（4）若取出的字符是“）”，则将距离S1栈栈顶最近的“（”之间的运算符，逐个出栈，依次送入S2栈，此时抛弃“（”。
（5）重复上面的1~4步，直至处理完所有的输入字符
（6）若取出的字符是“#”，则将S1栈内所有运算符（不包括“#”），逐个出栈，依次送入S2栈。
完成以上步骤，S2栈便为逆波兰式输出结果。




*java中stack的使用方法：
empty():判断栈是否为空，为空返回true,否则返回false
peek():取出栈顶元素，但是不从栈中移除元素
pop():取出栈顶元素，并且将其从栈中移除
push(Eitem):元素入栈
search(Objecto):在栈中查找元素位置，位置从栈顶开始往下算，栈顶为1，
依次往下数到所查找元素位置，如果所查找元素在栈中不存在，则返回-1。
 




*声明并开辟数组：
 数据类型 [] 数组名称 = new 数据类型[长度];
 数组的访问通过索引完成，即：“数组名称[索引]”
 在 Java 中提供有一种动态取得数组长度的方式：数组名称.length；





API（Application Programming Interface,应用程序编程接口）
是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，
而又无需访问源码，或理解内部工作机制的细节。
C语言 API 以函数的形式呈现，例如 printf()、scanf()、fopen() 等。
Java API 主要以类的形式呈现，例如 String、Thread、Date 等。
C++ 是在C语言的基础上进行的扩展，所以 C++ API 既包含函数也包含类。
第三方库（框架）
libxml2——xml的c语言版库，CURL—— http和https的请求，iconv——功能强大的编码格式转化库，UTF8，Unicode等互相转化很方便
openssl——C的开源密库，可以进行证书加密和https的访问的模拟提交可以和CURL配合使用，
cocos2d——2D游戏引擎，相比较传统的UI自己控制的重画
OpenCV——开源图像库
还有很多第三方（非官方）的组织机构、公司、个人提供的代码，也是一种 API。
这些代码有的免费，有的收费；有的开源，有的闭源。这些代码大都针对某个特定的应用领域编写，有时候被称为框架或者库。
例如基于C语言的图形界面库GTK，基于C++的网络库ACE，基于Java的大数据处理平台Hadoop，基于Python的Web开发框架Django，
基于JavaScript的前端开发框架React。
全球最大的代码托管网站GitHub也贡献了很多优秀的代码，它们大都开源免费。



Fragment
Android3.0后引入的一个新的API，他出现的初衷是为了适应大屏幕的平板电脑， 
当然现在他仍然是平板APP UI设计的宠儿，而且我们普通手机开发也会加入这个Fragment， 
我们可以把他看成一个小型的Activity，又称Activity片段！想想，如果一个很大的界面，我们 就一个布局，
写起界面来会有多麻烦，而且如果组件多的话是管理起来也很麻烦！而使用Fragment 我们可以把屏幕划分成几块，
然后进行分组，进行一个模块化的管理！从而可以更加方便的在 运行过程中动态地更新Activity的用户界面！
另外Fragment并不能单独使用，他需要嵌套在Activity 中使用，尽管他拥有自己的生命周期，
但是还是会受到宿主Activity的生命周期的影响，
比如Activity 被destory销毁了，他也会跟着销毁！


